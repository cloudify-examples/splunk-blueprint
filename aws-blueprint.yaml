tosca_definitions_version: cloudify_dsl_1_3

description: |
  This blueprint deploys Splunk on AWS.
  It uses the common types and templates for Splunk, and adds the AWS-specific
  artifacts (inputs, types and templates).

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.5.1.2/plugin.yaml
  - http://www.getcloudify.org/spec/awssdk-plugin/1.2.0.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.6/plugin.yaml
  - includes/commons.yaml

inputs:
  ec2_region_name:
    description: EC2 region to use.
    type: string
    default: { get_secret: ec2_region_name }

  aws_access_key_id:
    description: Access key ID to use for AWS communications.
    type: string
    default: { get_secret: aws_access_key_id }

  aws_secret_access_key:
    description: Secret access key to use for AWS communications.
    type: string
    default: { get_secret: aws_secret_access_key }

  vpc_id:
    description: Existing VPC to use.
    type: string
    default: { get_secret: vpc_id }

  private_subnet_id:
    description: Subnet to connect new VMs to.
    type: string

  ami_id:
    description: AMI to use when creating VM's.
    type: string

  instance_type:
    description: AWS instance type to create.
    type: string
    default: t2.medium

  agent_user:
    description: The Linux account that the Cloudify Agent should run with.
    type: string
    default: centos

  root_volume_size:
    description: Size of root volume (GiB).
    type: integer
    default: 8

dsl_definitions:
  - &aws_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: ec2_region_name }
  - &awssdk_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    region_name: { get_input: ec2_region_name }
  - &vm_properties
    agent_config:
      install_method: init_script
      user: { get_input: agent_user }
    aws_config: *aws_config
    image_id: { get_input: ami_id }
    instance_type: { get_input: instance_type }
    parameters:
      block_device_map:
        /dev/sda1:
          size: { get_input: root_volume_size }
          delete_on_termination: true
  - &vm_config
    type: cloudify.aws.nodes.Instance
    interfaces:
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
              interval: 1
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
        start:
          implementation: diamond.diamond_agent.tasks.add_collectors
          inputs:
            collectors_config:
              CPUCollector: {}
              MemoryCollector: {}
              LoadAverageCollector: {}
              DiskUsageCollector:
                config:
                  devices: x?vd[a-z]+[0-9]*$
              NetworkCollector: {}
              ProcessResourcesCollector:
                config:
                  enabled: true
                  unit: B
                  measure_collector_time: true
                  cpu_interval: 0.5
                  process:
                    node:
                      name: node

node_templates:
  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *awssdk_config
      use_external_resource: true
      resource_id: { get_input: vpc_id }

  subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *awssdk_config
      use_external_resource: true
      resource_id: { get_input: private_subnet_id }
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  splunk_public_ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      client_config: *awssdk_config
      resource_config:
        kwargs:
          Domain: vpc
    relationships:
      - target: splunk_vm
        type: cloudify.relationships.connected_to

  forwarder_public_ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      client_config: *awssdk_config
      resource_config:
        kwargs:
          Domain: vpc
    relationships:
      - target: forwarder_vm
        type: cloudify.relationships.connected_to

  splunk_security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      client_config: *awssdk_config
      resource_config:
        kwargs:
          Description: Security group for Splunk node
          GroupName: Splunk
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  splunk_security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *awssdk_config
      resource_config:
        kwargs:
          IpPermissions:
            - FromPort: { get_input: splunk_web_port }
              ToPort: { get_input: splunk_web_port }
              IpProtocol: tcp
              IpRanges:
                - CidrIp: 0.0.0.0/0
            - FromPort: { get_input: splunk_management_port }
              ToPort: { get_input: splunk_management_port }
              IpProtocol: tcp
              IpRanges:
                - CidrIp: 0.0.0.0/0
            - FromPort: { get_input: splunk_receiver_port }
              ToPort: { get_input: splunk_receiver_port }
              IpProtocol: tcp
              IpRanges:
                - CidrIp: 0.0.0.0/0
    relationships:
      - target: splunk_security_group
        type: cloudify.relationships.contained_in

  splunk_vm:
    <<: *vm_config
    properties:
      <<: *vm_properties
      name: splunk
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: splunk_security_group

  forwarder_vm:
    <<: *vm_config
    properties:
      <<: *vm_properties
      name: forwarder
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: subnet

outputs:
  splunk_public_ip_address:
    value: { get_attribute: [ splunk_public_ip, aws_resource_id ] }
  forwarder_node_public_ip_address:
    value: { get_attribute: [ forwarder_public_ip, aws_resource_id ] }
  splunk_url_public:
    value: { concat: ['http://', { get_attribute: [ splunk_public_ip, aws_resource_id ] }, ':', { get_input: splunk_web_port }] }
